[gd_resource type="VisualShader" load_steps=15 format=3 uid="uid://bhwwfl87cn7nv"]

[sub_resource type="VisualShaderNodeExpression" id="2"]
size = Vector2(553, 313)
expression = "// the value 0.9375 results when comparing intensity * 16.0 > threshold * 15.0
// we just use 15.0 / 16.0 instead
ditheredColor.rgb = (pixelColor.r > threshold * 0.9375) ? color0.rgb : color1.rgb;"

[sub_resource type="VisualShaderNodeGlobalExpression" id="3"]
size = Vector2(470, 261)
expression = "float get_threshold(int x, int y) {
	if (x == 0) {
		if (y == 0) {
			return thresholdMap[0][0];
		} else if (y == 1) {
			return thresholdMap[0][1];
		} else if (y == 2) {
			return thresholdMap[0][2];
		} else if (y == 3) {
			return thresholdMap[0][3];
		}
	} else if (x == 1) {
		if (y == 0) {
			return thresholdMap[1][0];
		} else if (y == 1) {
			return thresholdMap[1][1];
		} else if (y == 2) {
			return thresholdMap[1][2];
		} else if (y == 3) {
			return thresholdMap[1][3];
		}
	} else if (x == 2) {
		if (y == 0) {
			return thresholdMap[2][0];
		} else if (y == 1) {
			return thresholdMap[2][1];
		} else if (y == 2) {
			return thresholdMap[2][2];
		} else if (y == 3) {
			return thresholdMap[2][3];
		}
	} else if (x == 3) {
		if (y == 0) {
			return thresholdMap[3][0];
		} else if (y == 1) {
			return thresholdMap[3][1];
		} else if (y == 2) {
			return thresholdMap[3][2];
		} else if (y == 3) {
			return thresholdMap[3][3];
		}
	}
	return 0.0;
}"

[sub_resource type="VisualShaderNodeColorParameter" id="6"]
parameter_name = "ColorLight"

[sub_resource type="VisualShaderNodeColorParameter" id="7"]
parameter_name = "ColorDark"

[sub_resource type="VisualShaderNodeTexture" id="10"]
output_port_for_preview = 0
expanded_output_ports = [0]
source = 5

[sub_resource type="VisualShaderNodeVectorDecompose" id="12"]
default_input_values = [0, Vector2(0, 0)]
op_type = 0

[sub_resource type="VisualShaderNodeColorFunc" id="15"]

[sub_resource type="VisualShaderNodeVectorOp" id="16"]
output_port_for_preview = 0
default_input_values = [0, Vector2(0, 0), 1, Vector2(84, 48)]
op_type = 0
operator = 2

[sub_resource type="VisualShaderNodeInput" id="17"]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id="19"]
output_port_for_preview = 0
default_input_values = [0, Vector2(0, 0), 1, Vector2(4, 4)]
op_type = 0
operator = 3

[sub_resource type="VisualShaderNodeVec2Parameter" id="VisualShaderNodeVec2Parameter_ur3hj"]
output_port_for_preview = 0
parameter_name = "ScreenSize"
default_value = Vector2(84, 48)

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_13qdm"]
parameter_name = "Texture2DParameter"
texture_filter = 1
texture_repeat = 1

[sub_resource type="VisualShaderNodeTexture" id="8"]
source = 2

[sub_resource type="VisualShaderNodeGlobalExpression" id="9"]
size = Vector2(363, 187)
expression = "const mat4 thresholdMap = mat4(
    vec4(0.0, 12.0, 3.0, 15.0), 
    vec4(8.0, 4.0, 11.0, 7.0), 
    vec4(2.0, 14.0, 1.0, 13.0), 
    vec4(10.0, 6.0, 9.0, 5.0)
);"

[resource]
code = "shader_type canvas_item;
uniform vec4 ColorLight : source_color;
uniform vec4 ColorDark : source_color;
uniform sampler2D Texture2DParameter : filter_nearest, repeat_enable;


// GlobalExpression:0
	const mat4 thresholdMap = mat4(
	    vec4(0.0, 12.0, 3.0, 15.0), 
	    vec4(8.0, 4.0, 11.0, 7.0), 
	    vec4(2.0, 14.0, 1.0, 13.0), 
	    vec4(10.0, 6.0, 9.0, 5.0)
	);
// GlobalExpression:1
	float get_threshold(int x, int y) {
		if (x == 0) {
			if (y == 0) {
				return thresholdMap[0][0];
			} else if (y == 1) {
				return thresholdMap[0][1];
			} else if (y == 2) {
				return thresholdMap[0][2];
			} else if (y == 3) {
				return thresholdMap[0][3];
			}
		} else if (x == 1) {
			if (y == 0) {
				return thresholdMap[1][0];
			} else if (y == 1) {
				return thresholdMap[1][1];
			} else if (y == 2) {
				return thresholdMap[1][2];
			} else if (y == 3) {
				return thresholdMap[1][3];
			}
		} else if (x == 2) {
			if (y == 0) {
				return thresholdMap[2][0];
			} else if (y == 1) {
				return thresholdMap[2][1];
			} else if (y == 2) {
				return thresholdMap[2][2];
			} else if (y == 3) {
				return thresholdMap[2][3];
			}
		} else if (x == 3) {
			if (y == 0) {
				return thresholdMap[3][0];
			} else if (y == 1) {
				return thresholdMap[3][1];
			} else if (y == 2) {
				return thresholdMap[3][2];
			} else if (y == 3) {
				return thresholdMap[3][3];
			}
		}
		return 0.0;
	}

void fragment() {
	vec4 n_out4p0;
// Texture2D:4
	n_out4p0 = texture(TEXTURE, UV);


	vec3 n_out22p0;
// ColorFunc:22
	{
		vec3 c = vec3(n_out4p0.xyz);
		float max1 = max(c.r, c.g);
		float max2 = max(max1, c.b);
		n_out22p0 = vec3(max2, max2, max2);
	}


// ColorParameter:15
	vec4 n_out15p0 = ColorLight;


// ColorParameter:16
	vec4 n_out16p0 = ColorDark;


// Input:24
	vec2 n_out24p0 = UV;


// VectorOp:23
	vec2 n_in23p1 = vec2(84.00000, 48.00000);
	vec2 n_out23p0 = n_out24p0 * n_in23p1;


// VectorOp:26
	vec2 n_in26p1 = vec2(4.00000, 4.00000);
	vec2 n_out26p0 = n_out23p0 / n_in26p1;


	vec4 n_out17p0;
// Texture2D:17
	n_out17p0 = texture(Texture2DParameter, n_out26p0);


// VectorDecompose:19
	float n_out19p0 = vec2(n_out17p0.xy).x;
	float n_out19p1 = vec2(n_out17p0.xy).y;


	vec3 n_out11p0;
// Expression:11
	n_out11p0 = vec3(0.0, 0.0, 0.0);
	{
		// the value 0.9375 results when comparing intensity * 16.0 > n_out19p0 * 15.0
		// we just use 15.0 / 16.0 instead
		n_out11p0.rgb = (n_out22p0.r > n_out19p0 * 0.9375) ? vec3(n_out15p0.xyz).rgb : vec3(n_out16p0.xyz).rgb;
	}


// Output:0
	COLOR.rgb = n_out11p0;


}
"
graph_offset = Vector2(-1435.83, 529.809)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(380, 40)
nodes/fragment/4/node = SubResource("8")
nodes/fragment/4/position = Vector2(-860, -40)
nodes/fragment/9/node = SubResource("9")
nodes/fragment/9/position = Vector2(-800, -240)
nodes/fragment/9/size = Vector2(363, 187)
nodes/fragment/9/input_ports = ""
nodes/fragment/9/output_ports = ""
nodes/fragment/9/expression = "const mat4 thresholdMap = mat4(
    vec4(0.0, 12.0, 3.0, 15.0), 
    vec4(8.0, 4.0, 11.0, 7.0), 
    vec4(2.0, 14.0, 1.0, 13.0), 
    vec4(10.0, 6.0, 9.0, 5.0)
);"
nodes/fragment/11/node = SubResource("2")
nodes/fragment/11/position = Vector2(-360, 40)
nodes/fragment/11/size = Vector2(553, 313)
nodes/fragment/11/input_ports = "0,4,pixelColor;1,4,color0;2,4,color1;3,0,threshold;"
nodes/fragment/11/output_ports = "0,4,ditheredColor;"
nodes/fragment/11/expression = "// the value 0.9375 results when comparing intensity * 16.0 > threshold * 15.0
// we just use 15.0 / 16.0 instead
ditheredColor.rgb = (pixelColor.r > threshold * 0.9375) ? color0.rgb : color1.rgb;"
nodes/fragment/12/node = SubResource("3")
nodes/fragment/12/position = Vector2(-800, -520)
nodes/fragment/12/size = Vector2(470, 261)
nodes/fragment/12/input_ports = ""
nodes/fragment/12/output_ports = ""
nodes/fragment/12/expression = "float get_threshold(int x, int y) {
	if (x == 0) {
		if (y == 0) {
			return thresholdMap[0][0];
		} else if (y == 1) {
			return thresholdMap[0][1];
		} else if (y == 2) {
			return thresholdMap[0][2];
		} else if (y == 3) {
			return thresholdMap[0][3];
		}
	} else if (x == 1) {
		if (y == 0) {
			return thresholdMap[1][0];
		} else if (y == 1) {
			return thresholdMap[1][1];
		} else if (y == 2) {
			return thresholdMap[1][2];
		} else if (y == 3) {
			return thresholdMap[1][3];
		}
	} else if (x == 2) {
		if (y == 0) {
			return thresholdMap[2][0];
		} else if (y == 1) {
			return thresholdMap[2][1];
		} else if (y == 2) {
			return thresholdMap[2][2];
		} else if (y == 3) {
			return thresholdMap[2][3];
		}
	} else if (x == 3) {
		if (y == 0) {
			return thresholdMap[3][0];
		} else if (y == 1) {
			return thresholdMap[3][1];
		} else if (y == 2) {
			return thresholdMap[3][2];
		} else if (y == 3) {
			return thresholdMap[3][3];
		}
	}
	return 0.0;
}"
nodes/fragment/15/node = SubResource("6")
nodes/fragment/15/position = Vector2(-880, 100)
nodes/fragment/16/node = SubResource("7")
nodes/fragment/16/position = Vector2(-860, 220)
nodes/fragment/17/node = SubResource("10")
nodes/fragment/17/position = Vector2(-740, 440)
nodes/fragment/19/node = SubResource("12")
nodes/fragment/19/position = Vector2(-540, 360)
nodes/fragment/22/node = SubResource("15")
nodes/fragment/22/position = Vector2(-640, -40)
nodes/fragment/23/node = SubResource("16")
nodes/fragment/23/position = Vector2(-1280, 340)
nodes/fragment/24/node = SubResource("17")
nodes/fragment/24/position = Vector2(-1600, 200)
nodes/fragment/26/node = SubResource("19")
nodes/fragment/26/position = Vector2(-1100, 340)
nodes/fragment/27/node = SubResource("VisualShaderNodeVec2Parameter_ur3hj")
nodes/fragment/27/position = Vector2(-1600, 460)
nodes/fragment/29/node = SubResource("VisualShaderNodeTexture2DParameter_13qdm")
nodes/fragment/29/position = Vector2(-1080, 640)
nodes/fragment/connections = PackedInt32Array(11, 0, 0, 0, 15, 0, 11, 1, 16, 0, 11, 2, 4, 0, 22, 0, 22, 0, 11, 0, 24, 0, 23, 0, 23, 0, 26, 0, 19, 0, 11, 3, 17, 0, 19, 0, 29, 0, 17, 2, 26, 0, 17, 0)
